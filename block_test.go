package db2sql

import (
	"encoding/hex"
	"testing"

	"github.com/webdeveloppro/cryptopiggy/pkg/address"
	"github.com/webdeveloppro/cryptopiggy/pkg/block"
	"github.com/webdeveloppro/cryptopiggy/pkg/transaction"

	"github.com/btcsuite/btcd/chaincfg/chainhash"

	"github.com/btcsuite/btcd/wire"
)

type FakeStorage struct{}

func (f *FakeStorage) GetTxOutByIndex(hash string, index uint32) (*transaction.TxOut, error) {
	t := transaction.TxOut{
		PkScript: hex.EncodeToString([]byte{
			0x76, 0xa9, 0x14, 0x74, 0x27, 0x13, 0x4f, 0x29,
			0x1e, 0x93, 0x70, 0x30, 0xe4, 0xb5, 0x0f, 0x2d,
			0x52, 0xea, 0xdd, 0x1f, 0xc9, 0xd3, 0xbd, 0x88,
			0xac,
		}),
		Value:     100700000,
		Addresses: []string{"1BbACG7ZCEDHDiKJHVVdobmBzdJfPgERCX"},
	}
	return &t, nil
}

func (f *FakeStorage) GetAddressByHash(hash string) (*address.Address, error) {
	return &address.Address{
		ID:       1,
		Hash:     hash,
		Ballance: 100,
		Income:   125,
	}, nil
}

func (f *FakeStorage) getTransaction() *transaction.Transaction {
	return &transaction.Transaction{}
}

// TestGetInputAddress will test if we have a right hex to bitcoin address translator
func TestTxin2Struct(t *testing.T) {
	AddrStorage = make(map[string]*address.Address, 1)

	testData := []struct {
		name      string
		hash      string
		Index     uint32
		Signature []byte
		Sequence  uint32
		Address   string
		Amount    int64
	}{
		{
			name:  "Simple test 2 in 2 out",
			hash:  "8dd9f2b0fd1e09232e7fc4217b788ef9c23d891c45eef266dd3999ef1c9d2b1c",
			Index: 1,
			Signature: []byte{
				0x47, 0x30, 0x44, 0x02, 0x20, 0x06, 0x97, 0x0d,
				0x88, 0x42, 0x1a, 0x36, 0x68, 0x14, 0x7e, 0x1d,
				0xaa, 0x6d, 0xab, 0x31, 0xc7, 0x70, 0x21, 0x5b,
				0x0e, 0x16, 0x8a, 0x07, 0x00, 0x8f, 0x8a, 0xd7,
				0xfa, 0xcc, 0x3c, 0x20, 0xe6, 0x02, 0x20, 0x4a,
				0x85, 0xdc, 0x31, 0x04, 0x17, 0xb3, 0xa0, 0x0b,
				0x08, 0xc2, 0xac, 0x72, 0xd2, 0x3f, 0x43, 0x91,
				0xb1, 0xa1, 0x5a, 0x0c, 0xa7, 0xac, 0xed, 0x53,
				0x90, 0x6c, 0x61, 0x1c, 0xf1, 0xb2, 0x71, 0x01,
				0x41, 0x04, 0x5b, 0x95, 0xd5, 0x9d, 0x25, 0x60,
				0xa4, 0x77, 0x26, 0xf5, 0x54, 0xfe, 0xb7, 0xf2,
				0x5d, 0xf2, 0x0a, 0xbe, 0x50, 0x4c, 0xf8, 0xc3,
				0x7b, 0x3e, 0x5b, 0xfa, 0x17, 0x50, 0xec, 0x76,
				0x76, 0xbc, 0x6c, 0x39, 0x14, 0xdc, 0x9e, 0xfb,
				0xcd, 0xb4, 0x36, 0xc4, 0x47, 0xcc, 0x34, 0xde,
				0xd9, 0x4e, 0xeb, 0xdb, 0xb4, 0x45, 0x59, 0x99,
				0x5d, 0x0b, 0x3a, 0xb0, 0xf0, 0x44, 0xf4, 0x0e,
				0xe5, 0xe3},
			Sequence: 4294967295,
			Address:  "1BbACG7ZCEDHDiKJHVVdobmBzdJfPgERCX",
			Amount:   100700000,
		},
		{
			name:  "Cannot decode txin",
			hash:  "3ee060fb1856f111859fb108d079635a2d225ef68d5ae5250ce70d39ac2a2dc4",
			Index: 1,
			Signature: []byte{
				0x47, 0x30, 0x44, 0x02, 0x20, 0x06, 0x97, 0x0d,
				0x88, 0x42, 0x1a, 0x36, 0x68, 0x14, 0x7e, 0x1d,
				0xaa, 0x6d, 0xab, 0x31, 0xc7, 0x70, 0x21, 0x5b,
				0x0e, 0x16, 0x8a, 0x07, 0x00, 0x8f, 0x8a, 0xd7,
				0xfa, 0xcc, 0x3c, 0x20, 0xe6, 0x02, 0x20, 0x4a,
				0x85, 0xdc, 0x31, 0x04, 0x17, 0xb3, 0xa0, 0x0b,
				0x08, 0xc2, 0xac, 0x72, 0xd2, 0x3f, 0x43, 0x91,
				0xb1, 0xa1, 0x5a, 0x0c, 0xa7, 0xac, 0xed, 0x53,
				0x90, 0x6c, 0x61, 0x1c, 0xf1, 0xb2, 0x71, 0x01,
				0x41, 0x04, 0x5b, 0x95, 0xd5, 0x9d, 0x25, 0x60,
				0xa4, 0x77, 0x26, 0xf5, 0x54, 0xfe, 0xb7, 0xf2,
				0x5d, 0xf2, 0x0a, 0xbe, 0x50, 0x4c, 0xf8, 0xc3,
				0x7b, 0x3e, 0x5b, 0xfa, 0x17, 0x50, 0xec, 0x76,
				0x76, 0xbc, 0x6c, 0x39, 0x14, 0xdc, 0x9e, 0xfb,
				0xcd, 0xb4, 0x36, 0xc4, 0x47, 0xcc, 0x34, 0xde,
				0xd9, 0x4e, 0xeb, 0xdb, 0xb4, 0x45, 0x59, 0x99,
				0x5d, 0x0b, 0x3a, 0xb0, 0xf0, 0x44, 0xf4, 0x0e,
				0xe5, 0xe3},
			Sequence: 4294967295,
			Address:  "1BbACG7ZCEDHDiKJHVVdobmBzdJfPgERCX",
			Amount:   100700000,
		},
	}

	for _, el := range testData {

		t.Run(el.name, func(t *testing.T) {
			txIn := wire.TxIn{}
			hash, err := chainhash.NewHashFromStr(el.hash)
			if err != nil {
				t.Errorf("Cannot convert string %s to hash %v", el.hash, err)
			}
			txIn.PreviousOutPoint = *wire.NewOutPoint(hash, el.Index)
			txIn.Sequence = el.Sequence
			txIn.SignatureScript = el.Signature

			Block := &block.Block{}
			Block.Transactions = make([]transaction.Transaction, 0)
			b2sql := NewBlock(&FakeStorage{}, Block)

			txin, err := b2sql.Txin2Struct(&txIn)
			if err != nil {
				t.Error(err)
			}

			if txin.Address != el.Address {
				t.Errorf("txin address is not correct, expect: %s got: %s", el.Address, txin.Address)
			}

			if txin.Amount != el.Amount {
				t.Errorf("txin amount is not correct, expect: %d got: %d", el.Amount, txin.Amount)
			}

			if txin.Sequence != el.Sequence {
				t.Errorf("txin Sequance is not correct, expect: %d got: %d", el.Sequence, txin.Sequence)
			}

			if AddrStorage[txin.Address].Ballance != 100-el.Amount {
				t.Errorf("txin amount is not correct, expect: 100-%d got: %d", el.Amount, AddrStorage[txin.Address].Ballance)
			}
		})
	}
}

func TestConvertTransactions(t *testing.T) {

}
